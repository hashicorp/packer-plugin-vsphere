# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

name: Go Validate

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  get-go-version:
    name: Check Go Version
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Check Go Version
        id: get-go-version
        run: |
          echo "Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT
  check-mod-tidy:
    name: Check Module Packages
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Check Module Packages
        run: go mod tidy
  check-lint:
    name: Run Linters
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Run Linters
        uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # v6.5.2
        # Important: Do not update to v7 until the configuration is updated to v2.
        # To Do: Update to v7 along with v2 of the .golangci.yml configuration.
        with:
          version: v1.64.8
          # Important: Do not update to v2 until the configuration is updated.
          # To Do: Update to v2 along with v7 of golangci-lint-action.
          only-new-issues: true
  check-fmt:
    name: Check Formatting
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Check Formatting
        run: |
          go fmt ./...
          echo "==> Checking that code complies with go fmt requirements..."
          git diff --exit-code; if [ $$? -eq 1 ]; then \
          echo "Found files that are not fmt'ed."; \
          echo "You can use the command: \`go fmt ./...\` to reformat code."; \
          exit 1; \
          fi
  check-generate:
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    name: Check Generated Files
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Check Generated Files
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make generate
          uncommitted="$(git status -s)"
          if [[ -z "$uncommitted" ]]; then
            echo "OK"
          else
            echo "Docs have been updated, but the compiled docs have not been committed."
            echo "Run 'make generate', and commit the result to resolve this error."
            echo "Generated but uncommitted files:"
            echo "$uncommitted"
            exit 1
          fi
